/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ITLMPack;

/**
 *
 * @author Marina Nik
 */
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CreateButton = new javax.swing.JButton();
        ImportButton = new javax.swing.JButton();
        BaseComboBox = new javax.swing.JComboBox<>();
        GoToButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        DelButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        InfoPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CreateButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        CreateButton.setText("Створити базу даних");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        ImportButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ImportButton.setText("Імпорт");
        ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportButtonActionPerformed(evt);
            }
        });

        BaseComboBox.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        BaseComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BaseComboBoxItemStateChanged(evt);
            }
        });

        GoToButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        GoToButton.setText("Перейти");
        GoToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoToButtonActionPerformed(evt);
            }
        });

        EditButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        EditButton.setText("Редагувати");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        DelButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        DelButton.setText("Видалити");
        DelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelButtonActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        SaveButton.setText("Зберегти");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(InfoPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BaseComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CreateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ImportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GoToButton, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(DelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BaseComboBox)
                    .addComponent(GoToButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        // TODO add your handling code here:
        InfoPane.setText("");
        MainDialog.main(bases.size(), true);
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void ImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
        // TODO add your handling code here:
        importDB();
    }//GEN-LAST:event_ImportButtonActionPerformed

    private void GoToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoToButtonActionPerformed
        // TODO add your handling code here:
        if (isGUIActive)
            InfoPane.setText("Одночасно можна відкрити тільки одну базу даних!");
        else if (bases.isEmpty())
            InfoPane.setText("Створіть хоча б одну базу даних!");
        else{
            isGUIActive = true;
            DBGUI.main(curBase.getIndex());
        }
    }//GEN-LAST:event_GoToButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        // TODO add your handling code here:
        if (isGUIActive)
            InfoPane.setText("Одночасно можна відкрити тільки одну базу даних!");
        else if (bases.isEmpty())
            InfoPane.setText("Створіть хоча б одну базу даних!");
        else{
            MainDialog.main(curBase.getIndex(), false);
        }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void DelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelButtonActionPerformed
        // TODO add your handling code here:
        if (isGUIActive){
            InfoPane.setText("Необхідно закрити всі відкриті бази даних!");
        }
        else if (bases.isEmpty())
            InfoPane.setText("Створіть хоча б одну базу даних!");
        else{
            BaseComboBox.removeAllItems();
            validate();
            repaint();
            curBase.delDB();
            for (int i = 0; i < bases.size(); i++)
                BaseComboBox.addItem(bases.get(i).name);
            validate();
            repaint();
        }
    }//GEN-LAST:event_DelButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        saveDB(curBase);
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void BaseComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BaseComboBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED){
            String temp = BaseComboBox.getSelectedItem().toString();
            for (int i = 0; i < bases.size(); i++)
                if (bases.get(i).name.equals(temp)){
                    curBase = bases.get(i);
                    break;
                }
            InfoPane.setText("База даних\nНазва: " + curBase.name + "\nОпис: " + curBase.descript + "\nНомер: " + curBase.getIndex());
        }
    }//GEN-LAST:event_BaseComboBoxItemStateChanged

    public static void addComponent(DataBase db){
        BaseComboBox.addItem(db.name);
    }
    
    public static void replaceItems(){
        BaseComboBox.removeAllItems();
        for (int i = 0; i < bases.size(); i++)
            BaseComboBox.addItem(bases.get(i).name);
    }
    
    public static void removeComponent(String name){
        for (int i = 0; i < bases.size(); i++)
            if (bases.get(i).name.equals(name)){
                BaseComboBox.remove(i);
                break;
            }
    }
    
    public static void disableGUI(boolean contr){
        isGUIActive = contr;
    }
    /**
     * @param args the command line arguments
     */
    private static void saveDB(DataBase base){
        if (bases.isEmpty()){
            InfoPane.setText("Виберіть базу даних для збереження!");
        }
        else if (isGUIActive){
            InfoPane.setText("Закрийте всі відкриті вікна!");
        }
        else{
            try {
            //here's the code that saves the database to the local file
            //can be used as a "Save" option too?
                BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Data\\InfTech Lab saves\\" + base.name + ".txt", false));
                PrintWriter pw = new PrintWriter(writer);
                pw.print(base.descript + "#" + base.getIndex());
                for (int i = 0; i < base.tableNum(); i++){
                    pw.print("\n\n");
                    pw.print(base.getTableInOrder(i).name + "#" + base.getTableInOrder(i).getIndex());
                    pw.print("\n");
                    for (int j = 0; j < base.getTableInOrder(i).attrNum(); j++){
                        boolean lims = (base.getTableInOrder(i).getAttrInOrder(j).getLowVal() != null);
                        pw.print("\n" + base.getTableInOrder(i).getAttrInOrder(j).name + "#" + base.getTableInOrder(i).getAttrInOrder(j).getTypeEntered()
                        + "#" + base.getTableInOrder(i).getAttrInOrder(j).getIndex() + "#" + lims + "#" + base.getTableInOrder(i).getAttrInOrder(j).getLowVal()
                        + "#" + base.getTableInOrder(i).getAttrInOrder(j).getUpVal());
                    }
                    pw.print("\n");
                    for (int j = 0; j < base.getTableInOrder(i).rowNum(); j++){
                        StringBuilder build = new StringBuilder();
                        for (int k = 0; k < base.getTableInOrder(i).attrNum(); k++){
                            build.append(base.getTableInOrder(i).getRowInOrder(j).getCell(k).getVal().toString());
                            if (k < base.getTableInOrder(i).attrNum() - 1)
                                build.append("#");
                        }
                        pw.print("\n" + build.toString());
                    }
                    pw.print("\n");
                }
                InfoPane.setText("Збереження успішне!");
                pw.close();
                writer.close();
            
            } catch (IOException ex) {
                InfoPane.setText("Exception caught in file opening! Error!");
            }
        }
    }
    
    public void importDB(){
        //long code for import with checking
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fc.setFileFilter(filter);
        int val = fc.showOpenDialog(this);
        if (val == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            try{
                Scanner scan = new Scanner(file);
                String name = file.getName().replaceFirst("[.][^.]+$", "");
                if (name.isBlank()){
                    scan.close();
                    InfoPane.setText("Ім'я файлу порожнє! Виберіть інший файл!\nІмпорт перервано");
                }
                else{
                    String[] temp = scan.nextLine().split("#");
                    if (!temp[1].matches("[0-9]+")){
                        scan.close();
                        InfoPane.setText("Номер бази не розпізнано!\nІмпорт перервано");
                    }
                    else{
                        boolean ready = true;
                        ArrayList<String> ob = new ArrayList<>(Arrays.asList("Integer", "Boolean", "String", "Double", "Character", "Color"));
                        DataBase db = new DataBase(name, temp[0], Integer.parseInt(temp[1]));
                        Table t = null;
                        Attribute a = null;
                        Row r = null;
                        int counter = 0;
                        while(scan.hasNextLine()){
                            String str = scan.nextLine();
                            if (str.isBlank()){
                                counter++;
                                if (counter == 4)
                                    counter = 0;
                            }
                            else if (counter == 1){
                                String[] temp2 = str.split("#");
                                if (!temp2[1].matches("[0-9]+")){
                                    scan.close();
                                    InfoPane.setText("Не вдалося розпізнати номер таблиці!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else{
                                    t = new Table(temp2[0], Integer.parseInt(temp2[1]));
                                    db.addT(t);
                                }
                            }
                            else if (counter == 2){
                                String[] temp2 = str.split("#");
                                if (!ob.contains(temp2[1])){
                                    scan.close();
                                    InfoPane.setText("Не вдалося розпізнати тип стовпця!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else if (!temp2[2].matches("[0-9]+"))
                                {
                                    scan.close();
                                    InfoPane.setText("Не вдалося розпізнати номер стовпця!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else if (t.getAttr(Integer.parseInt(temp2[2])) != null){
                                    scan.close();
                                    InfoPane.setText("Знайдено стовпці з однаковими номерами!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else if (!temp2[1].equals("Color") && temp2[3].equals("true")){
                                    scan.close();
                                    InfoPane.setText("Стовпцю не з типом кольору задано обмеження!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else if (temp2[3].equals("true") && (temp2[4].equals("null") || temp2[5].equals("null"))){
                                    scan.close();
                                    InfoPane.setText("У стовпці вказано обмеження, але не вказані їх значення!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else{
                                    int tr = 0;
                                    if (temp2[3].equals("true"))
                                        tr = 1;
                                    String LLim = "0x" + temp2[4].toUpperCase();
                                    String ULim = "0x" + temp2[5].toUpperCase();
                                    if (tr == 1)
                                        a = new Attribute(temp2[0], temp2[1], Integer.parseInt(temp2[2]), tr, LLim, ULim);
                                    else
                                        a = new Attribute(temp2[0], temp2[1], Integer.parseInt(temp2[2]), tr, null, null);
                                    t.addAttr(a);
                                }
                            }
                            else if (counter == 3){
                                String[] temp2 = str.split("#");
                                if (temp2.length != t.attrNum()){
                                    scan.close();
                                    InfoPane.setText("Кількість клітинок у рядку не дорівнює кількості стовпців!\nІмпорт перервано");
                                    ready = false;
                                    break;
                                }
                                else{
                                    t.addRow();
                                    for (int i = 0; i < t.attrNum(); i++)
                                        t.getRowInOrder(t.rowNum() - 1).addCell(t.getAttrInOrder(i), i);
                                    try{
                                        for (int j = 0; j < temp2.length; j++){
                                            if (t.getAttrInOrder(j).getTypeEntered().equals("Integer")){
                                                t.getRowInOrder(t.rowNum() - 1).getCell(j).setVal(new Integer(temp2[j]));
                                            }
                                            else if (t.getAttrInOrder(j).getTypeEntered().equals("Double")){
                                                t.getRowInOrder(t.rowNum() - 1).getCell(j).setVal(new Double(temp2[j]));
                                            }
                                            else if (t.getAttrInOrder(j).getTypeEntered().equals("Character")){
                                                t.getRowInOrder(t.rowNum() - 1).getCell(j).setVal(new Character(temp2[j].charAt(0)));
                                            }
                                            else if (t.getAttrInOrder(j).getTypeEntered().equals("String")){
                                                t.getRowInOrder(t.rowNum() - 1).getCell(j).setVal(new String(temp2[j]));
                                            }
                                            else if (t.getAttrInOrder(j).getTypeEntered().equals("Boolean")){
                                                t.getRowInOrder(t.rowNum() - 1).getCell(j).setVal(new Boolean(temp2[j]));
                                            }
                                            else{
                                                String st = "0x" + temp2[j].toUpperCase();
                                                Color col = Color.decode(st);
                                                if (t.getAttrInOrder(j).isLesser(col, t.getAttrInOrder(j).getLowColVal())){
                                                    scan.close();
                                                    InfoPane.setText("Значення кольору не вписується в обмеження!\nІмпорт перервано");
                                                    ready = false;
                                                    break;
                                                }
                                                else if (t.getAttrInOrder(j).isLesser(t.getAttrInOrder(j).getUpColVal(), col)){
                                                    scan.close();
                                                    InfoPane.setText("Значення кольору не вписується в обмеження!\nІмпорт перервано");
                                                    ready = false;
                                                    break;
                                                }
                                                else
                                                    t.getRowInOrder(t.rowNum() - 1).getCell(j).setVal(col);
                                            }
                                        }
                                    }
                                    catch(Exception ex){
                                        scan.close();
                                        InfoPane.setText("Невірний формат вводу даних!\nІмпорт перервано");
                                        ready = false;
                                        break;
                                    }
                                }
                            }
                        }
                        if (ready){
                            InfoPane.setText("Імпорт успішно виконаний!");
                            addDB(db);
                            addComponent(db);
                            revalidate();
                            repaint();
                        }
                    }
                }
            }
            catch(FileNotFoundException ex){
                InfoPane.setText("Файл не знайдено!");
            }
        }
    }
    
    public static DataBase getBase (int index){
        for (int i = 0; i < bases.size(); i++)
            if (bases.get(i).getIndex() == index)
                return bases.get(i);
        return null;
    }
    
    public static DataBase getBaseInOrder(int index){
        return bases.get(index);
    }
    
    public static DataBase getLastBase(){
        return bases.get(bases.size() - 1);
    }
    
    public static int basesSize(){
        return bases.size();
    }
    
    public static void addDB(DataBase db){
        bases.add(db);
    }
    
    public static void delDB(int ind){
        bases.remove(ind);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                passwords = new ArrayList<>(Arrays.asList("admin1", "admin2", "admin3", "admin4", "admin5"));
                bases = new ArrayList<>();
                new GUI().setVisible(true);
            }
        });
    }

    private static DataBase curBase;
    
    private static ArrayList<DataBase> bases;
    
    private static boolean admin = true;
    
    private static ArrayList<String> passwords;
    
    private static JFileChooser fc;
    
    private static boolean isGUIActive = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox<String> BaseComboBox;
    private static javax.swing.JButton CreateButton;
    private javax.swing.JButton DelButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton GoToButton;
    private javax.swing.JButton ImportButton;
    private static javax.swing.JTextPane InfoPane;
    private javax.swing.JButton SaveButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
